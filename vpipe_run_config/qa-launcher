#!/bin/bash
#SBATCH --job-name="COVID-qa"
#SBATCH --cpus-per-task=1
#SBATCH --mem-per-cpu=1024
#SBATCH --time="4:00:00"
#SBATCH --oversubscribe

umask 0007



#
# Input validator
#
validateBatchName() {
	if [[ "$1" =~ ^(20[0-9][0-9][0-1][0-9][0-3][0-9]_[[:alnum:]-]{4,})$ ]]; then
		return;
	else
		echo "bad batchname ${1}"
		exit 1;
	fi
}



usage() { echo "Usage: $0 [ -r | -a | <BATCHES>... ]" 1>&2; exit $1; }
while getopts "rah" o; do
	case "${o}" in
		r)	batches=( $(cut -f 2 samples.recent.tsv	| sort -r -u ) )	;;
		a)	batches=( $(cut -f 2 samples.tsv	| sort -r -u ) )	;;
		h)	usage 0	;;
		*)	usage 1	;;
	esac
done
shift $((OPTIND-1))

batches+=( "$@" )
# TODO deduplicate

if (( ${#batches[@]} == 0 )); then
	# default: all
	echo "Default to recent  batches"
	batches=( $(cut -f 2 samples.recent.tsv	| sort -r -u ) )
fi

# Validate everything
for b in "${batches[@]}"; do
	validateBatchName "${b}"
done

echo "Batches: ${batches[*]}"
echo "Total batches: ${#batches[*]}" 


#
# submit to LSF
#


# run sub-jobs and waits for completion
sbatch --wait --parsable --array="0-$(( ${#batches[@]} - 1 ))" gather1qa "${batches[@]}"

echo "Assembling..."
# TODO this can be simplified by using xsv to merge the csv files
( 
	for b in "${batches[@]}"; do
		csv="qa/qa.${b}.csv"
		if [[ -r "${csv}" ]] && head -n 1 "${csv}"; then
			break;
		fi
	done
	cut -f 2 samples.tsv | sort -r -u | xargs -r -i tail -n '+2' 'qa/qa.{}.csv'
) > qa.csv
echo "Done."
