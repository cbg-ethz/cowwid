name: Create Variant Definition
on:
  issues:
    types: [opened, labeled]
  push:  # TEMPORARY: Remove this trigger after testing
    branches:
      - feat/nextclade_monitor
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: string

jobs:
  create-variant:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'variant-creation-needed') || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests PyYAML

      - name: Extract issue information and create variant definition
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number || github.event.inputs.issue_number || '10' }}
        run: |
          python << 'EOF'
          import os
          import requests
          import yaml
          import json
          import time
          import re
          from datetime import datetime, timedelta

          # Configuration
          GITHUB_TOKEN = os.environ['GITHUB_TOKEN']
          REPO = os.environ['GITHUB_REPOSITORY']
          ISSUE_NUMBER = os.environ['ISSUE_NUMBER']
          COVSPECTRUM_API = "https://lapis.cov-spectrum.org"
          MIN_PROPORTION = 0.8
          MIN_COUNT = 15

          def comment_on_issue(message):
              """Add a comment to the GitHub issue"""
              url = f"https://api.github.com/repos/{REPO}/issues/{ISSUE_NUMBER}/comments"
              headers = {
                  'Authorization': f'token {GITHUB_TOKEN}',
                  'Accept': 'application/vnd.github.v3+json'
              }
              data = {'body': message}
              try:
                  response = requests.post(url, headers=headers, json=data)
                  response.raise_for_status()
                  print(f"‚úÖ Added comment to issue #{ISSUE_NUMBER}")
              except Exception as e:
                  print(f"‚ùå Error commenting on issue: {e}")

          def get_issue_details():
              """Get issue title and body to extract clade information"""
              url = f"https://api.github.com/repos/{REPO}/issues/{ISSUE_NUMBER}"
              headers = {
                  'Authorization': f'token {GITHUB_TOKEN}',
                  'Accept': 'application/vnd.github.v3+json'
              }
              try:
                  response = requests.get(url, headers=headers)
                  response.raise_for_status()
                  issue_data = response.json()
                  
                  # Check if issue is still open
                  if issue_data.get('state') != 'open':
                      print(f"‚ö†Ô∏è Issue #{ISSUE_NUMBER} is {issue_data.get('state')}, skipping processing")
                      return None
                  
                  return issue_data
              except Exception as e:
                  print(f"‚ùå Error getting issue details: {e}")
                  return None

          def extract_clades_from_issue(issue_data):
              """Extract new clades from issue title and body"""
              if not issue_data:
                  return []
              
              # Look for display names in issue body (format: "- **25C (XFG)** (emerged: ...)")
              body = issue_data.get('body', '')
              title = issue_data.get('title', '')
              
              # Pattern to match: - **DISPLAY_NAME** (emerged: ...)
              pattern = r'- \*\*([^*]+)\*\* \(emerged:'
              matches = re.findall(pattern, body)
              
              clades = []
              for match in matches:
                  if '(' in match and ')' in match:
                      # Extract display name from "25C (XFG)" format
                      display_name = match.split('(')[1].split(')')[0].strip()
                      nextstrain_clade = match.split('(')[0].strip()
                      clades.append({
                          'nextstrain': nextstrain_clade,
                          'display_name': display_name
                      })
                  else:
                      # Fallback: treat the whole match as display name
                      clades.append({
                          'nextstrain': match,
                          'display_name': match
                      })
              
              print(f"üîç Extracted clades from issue: {clades}")
              return clades

          def query_covspectrum(variant_query):
              """Query CovSpectrum API for nucleotide mutations"""
              url = f"{COVSPECTRUM_API}/open/v2/sample/nucleotideMutations"
              params = {
                  'variantQuery': f"{variant_query}*",
                  'minProportion': MIN_PROPORTION,
                  'limit': 1000,
                  'downloadAsFile': 'false'
              }
              
              try:
                  print(f"üîç Querying CovSpectrum for variant: {variant_query}*")
                  response = requests.get(url, params=params)
                  response.raise_for_status()
                  data = response.json()
                  mutations = data.get('data', [])
                  
                  # Filter by minCount locally since API doesn't support it
                  filtered_mutations = [m for m in mutations if m.get('count', 0) >= MIN_COUNT]
                  
                  print(f"üìä Found {len(mutations)} total mutations, {len(filtered_mutations)} after count filter (>= {MIN_COUNT})")
                  return filtered_mutations
                  return mutations
              except Exception as e:
                  print(f"‚ùå Error querying CovSpectrum for {variant_query}: {e}")
                  return None

          def create_variant_file(clade_info, mutations):
              """Create variant YAML file"""
              nextstrain_clade = clade_info['nextstrain']
              display_name = clade_info['display_name']
              
              # Create filename: lowercase display name with _bot suffix
              filename = f"{display_name.lower()}_mutations_full_bot.yaml"
              filepath = f"voc/{filename}"
              
              # Build variant structure
              variant_data = {
                  'variant': {
                      'short': '',
                      'pangolin': display_name,
                      'nextstrain': nextstrain_clade
                  },
                  'mut': {}
              }
              
              # Add mutations sorted by position
              for mutation in mutations:
                  position = mutation.get('position')
                  mut_from = mutation.get('mutationFrom')
                  mut_to = mutation.get('mutationTo')
                  
                  if position and mut_from is not None and mut_to is not None:
                      if mut_to == '-':
                          # Deletion
                          mut_string = '-' * len(mut_from) if len(mut_from) > 1 else '-'
                      elif mut_from == '-':
                          # Insertion
                          mut_string = f"->{mut_to}"
                      else:
                          # Substitution
                          mut_string = f"{mut_from}>{mut_to}"
                      
                      variant_data['mut'][position] = mut_string
              
              # Sort mutations by position
              sorted_mutations = dict(sorted(variant_data['mut'].items(), key=lambda x: int(x[0])))
              variant_data['mut'] = sorted_mutations
              
              return filepath, variant_data

          def check_existing_pr(branch_name):
              """Check if PR already exists for this branch"""
              url = f"https://api.github.com/repos/{REPO}/pulls"
              headers = {
                  'Authorization': f'token {GITHUB_TOKEN}',
                  'Accept': 'application/vnd.github.v3+json'
              }
              params = {'head': f"{REPO.split('/')[0]}:{branch_name}", 'state': 'open'}
              
              try:
                  response = requests.get(url, headers=headers, params=params)
                  response.raise_for_status()
                  prs = response.json()
                  return len(prs) > 0, prs[0] if prs else None
              except Exception as e:
                  print(f"‚ùå Error checking existing PR: {e}")
                  return False, None

          def create_pr(branch_name, clade_info, filename):
              """Create pull request"""
              url = f"https://api.github.com/repos/{REPO}/pulls"
              headers = {
                  'Authorization': f'token {GITHUB_TOKEN}',
                  'Accept': 'application/vnd.github.v3+json'
              }
              
              title = f"Add automated variant definition for {clade_info['display_name']} ({clade_info['nextstrain']})"
              body = f"# ÔøΩ Automated Variant Definition\n\n"
              body += f"This PR adds the automated variant definition for **{clade_info['display_name']}** (Nextstrain clade {clade_info['nextstrain']}).\n\n"
              body += "## Generated Files\n"
              body += f"- `voc/{filename}` - Nucleotide mutations from CovSpectrum (automated)\n\n"
              body += "## CovSpectrum Query Parameters\n"
              body += f"- **Variant Query**: `{clade_info['display_name']}*`\n"
              body += f"- **Min Proportion**: {MIN_PROPORTION}\n"
              body += f"- **Min Count**: {MIN_COUNT}\n\n"
              body += f"## Related Issue\n"
              body += f"Closes #{ISSUE_NUMBER}\n\n"
              body += "---\n"
              body += "*This PR was automatically created by the Variant Creator workflow.*\n"
              
              data = {
                  'title': title,
                  'head': branch_name,
                  'base': 'master',
                  'body': body
              }
              
              try:
                  response = requests.post(url, headers=headers, json=data)
                  response.raise_for_status()
                  pr_data = response.json()
                  print(f"‚úÖ Created PR #{pr_data['number']}: {title}")
                  return pr_data
              except Exception as e:
                  print(f"‚ùå Error creating PR: {e}")
                  return None

          # Main execution
          print(f"üöÄ Starting variant creation for issue #{ISSUE_NUMBER}")
          
          # Get issue details (must be open to process)
          issue_data = get_issue_details()
          if not issue_data:
              print("‚ùå Could not retrieve issue details or issue is not open")
              exit(0)  # Exit gracefully instead of error
          
          # Extract clades from issue
          clades = extract_clades_from_issue(issue_data)
          if not clades:
              comment_on_issue("‚ùå **Variant Creation Failed**: Could not extract clade information from issue. Please ensure the issue contains new clade information in the expected format.")
              print("‚ùå No clades found in issue")
              exit(1)
          
          comment_on_issue(f"üîÑ **Variant Creation Started**: Processing {len(clades)} clade(s): {', '.join([c['display_name'] for c in clades])}")
          
          success_count = 0
          total_clades = len(clades)
          
          for clade_info in clades:
              try:
                  display_name = clade_info['display_name']
                  nextstrain_clade = clade_info['nextstrain']
                  
                  print(f"\nüî¨ Processing {display_name} ({nextstrain_clade})")
                  
                  # Create branch name
                  branch_name = f"variant/{nextstrain_clade.lower()}-{display_name.lower()}"
                  
                  # Check if PR already exists
                  pr_exists, existing_pr = check_existing_pr(branch_name)
                  if pr_exists:
                      comment_on_issue(f"‚ÑπÔ∏è **{display_name}**: PR already exists - {existing_pr['html_url']}")
                      print(f"‚ö†Ô∏è PR already exists for {display_name}")
                      continue
                  
                  # Query CovSpectrum
                  mutations = query_covspectrum(display_name)
                  if mutations is None:
                      comment_on_issue(f"‚ùå **{display_name}**: Failed to query CovSpectrum API. This might be a temporary issue - the workflow will retry automatically.")
                      print(f"‚ùå Failed to query CovSpectrum for {display_name}")
                      continue
                  
                  if len(mutations) == 0:
                      comment_on_issue(f"‚ö†Ô∏è **{display_name}**: No mutations found in CovSpectrum (variant might not be available yet). The workflow will retry automatically.")
                      print(f"‚ö†Ô∏è No mutations found for {display_name}")
                      continue
                  
                  # Create variant file
                  filepath, variant_data = create_variant_file(clade_info, mutations)
                  filename = os.path.basename(filepath)
                  
                  # Write file
                  os.makedirs(os.path.dirname(filepath), exist_ok=True)
                  with open(filepath, 'w') as f:
                      yaml.dump(variant_data, f, default_flow_style=False, sort_keys=False)
                  
                  print(f"‚úÖ Created variant file: {filepath}")
                  
                  # Create branch and commit
                  os.system(f'git config --local user.email "action@github.com"')
                  os.system(f'git config --local user.name "GitHub Action"')
                  os.system(f'git checkout -b {branch_name}')
                  os.system(f'git add {filepath}')
                  os.system(f'git commit -m "Add automated variant definition for {display_name} ({nextstrain_clade})"')
                  os.system(f'git push origin {branch_name}')
                  
                  # Create PR
                  pr_data = create_pr(branch_name, clade_info, filename)
                  if pr_data:
                      comment_on_issue(f"‚úÖ **{display_name}**: Created variant definition with {len(mutations)} mutations - PR #{pr_data['number']} ({pr_data['html_url']})")
                      success_count += 1
                  else:
                      comment_on_issue(f"‚ùå **{display_name}**: Created variant file but failed to create PR")
                  
              except Exception as e:
                  error_msg = f"‚ùå **{clade_info.get('display_name', 'Unknown')}**: Unexpected error during processing: {str(e)}"
                  comment_on_issue(error_msg)
                  print(f"‚ùå Error processing {clade_info}: {e}")
          
          # Final summary
          if success_count > 0:
              comment_on_issue(f"üéâ **Variant Creation Complete**: Successfully processed {success_count}/{total_clades} clade(s)")
          else:
              comment_on_issue(f"‚ö†Ô∏è **Variant Creation Incomplete**: Could not process any clades successfully. The workflow will retry automatically in a few hours.")
          
          print(f"üìä Final result: {success_count}/{total_clades} clades processed successfully")
          
          EOF

      - name: Setup retry mechanism
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # use issue 27 for testing, otherwise use the issue number from the event
          ISSUE_NUMBER: ${{ github.event.issue.number || github.event.inputs.issue_number || '27' }}
        run: |
          python << 'EOF'
          import os
          import requests
          from datetime import datetime, timedelta

          GITHUB_TOKEN = os.environ['GITHUB_TOKEN']
          REPO = os.environ['GITHUB_REPOSITORY']
          ISSUE_NUMBER = os.environ['ISSUE_NUMBER']

          def comment_on_issue(message):
              url = f"https://api.github.com/repos/{REPO}/issues/{ISSUE_NUMBER}/comments"
              headers = {
                  'Authorization': f'token {GITHUB_TOKEN}',
                  'Accept': 'application/vnd.github.v3+json'
              }
              data = {'body': message}
              try:
                  response = requests.post(url, headers=headers, json=data)
                  response.raise_for_status()
              except Exception as e:
                  print(f"Error commenting: {e}")

          # Schedule retry message
          retry_time = datetime.now() + timedelta(hours=4)
          comment_on_issue(f"üîÑ **Variant Creation Retry Scheduled**: The workflow encountered issues and will automatically retry around {retry_time.strftime('%Y-%m-%d %H:%M UTC')}. This is normal when CovSpectrum hasn't updated yet with the new variant data.")
          
          EOF
